---
title: "R Review - Basics"
author: "Augusto Gonzalez Bonorino"
output: html_notebook
---

## Contents

### Installation and Setup
- Installing R, and RStudio
- Markdown, and R notebooks

### Basics of R Programming
- Variables and Data Types
- Data structures: Vectors, Matrices, and Tables
- Descriptive Statistics
- Categorical data: Factors

#### Variables and Data Types

##### Defining Variables

In R, you can assign values to variables using the assignment operator `<-`. Here are examples:

```{r}
# Note: do Alt+- to get <- 
x <- 5                    # integer
y <- 2.5                  # float
name <- "Economist's"     # text
is_student <- TRUE        # Boolean 
```


##### Data Types

R supports various data types:

- **Numeric**: Includes both integers and floating-point numbers. Numeric data can be manipulated using arithmetic operators such as addition (+), subtraction (-), multiplication (*), division (/), and modulus (%), among others.

- *Character*: Represents strings of text. Strings can be combined using the concatenation operator (paste() or paste0()) and compared using relational operators like equality (==) or inequality (!=).

- ***Logical***: Represents TRUE or FALSE values. Logical values can be combined using logical operators like AND (&), OR (|), and NOT (!), allowing you to create more complex conditions for decision-making and filtering.

```{r}
# Numeric variables
age <- 30
income <- 50000.75

# Character variable
country <- "Econland"

# Logical variable
is_employed <- TRUE
```

#### Vector

Vector is the simplest data structure we can implement in R. A vector is a sequence of elements of the same data type. You create a vector by grouping its elements between parentheses preceded by the c() function that combines them.

```{r}
# Numeric vector
prices <- c(10.5, 20.3, 15.2, 12.7, 15.2)

# Character vector
fruits <- c("apple", "banana", "orange", "grape")

# Logical vector
bool_values <- c(TRUE, FALSE, TRUE, TRUE)

```

```{r}
# what if you have different data types? R will coerce the data types to the most general one

mixed_vector <- c(10, "apple", TRUE)
print(mixed_vector)

mixed_vector_2 <- c(10, TRUE, 20.5)
print(mixed_vector_2)
```

##### Indexing Vectors

You can access elements in a vector using indexing:

```{r}
# Accessing second element of prices vector
second_price <- prices[1]
print(second_price)

# Multiple indexing

## Accessing first three elements of fruits vector
first_three_fruits <- fruits[3:4]     # also called slicing
print(first_three_fruits)

## Accessing non-continuous indices with c()
odd_fruits <- fruits[c(2, 4)]
print(odd_fruits)

# Conditional indexing

## Accessing low prices
low_prices <- prices[prices < 20]
print(low_prices)

prices[prices == 15.2]
```

##### Modifying Vectors

You can modify vector elements using indexing as well:

```{r}
# Modify the second element of prices vector
prices[2] <- 22.0
print(prices)

# modify the second and third elements
prices[2:3] <- c(44, "gdp")
print(prices)
```

##### Vector Operations

R supports element-wise vector operations:

```{r}
# Adding two vectors element-wise
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)

summing <- vector1 + vector2
print(summing)

substracting <- vector1 - vector2
print(substracting)

multiplication <- vector1 * vector2
print(multiplication)
```

##### Vectorized Operations

R also supports vectorized operations, which apply a function to each element of a vector. The simplest ones are sum(), mean(), sd(), min(), and max().

```{r}
prices <- c(10.5, 20.3, 15.2, 12.7)

# Sum of prices
print(sum(prices))

# Mean of prices
print(mean(prices))

# standard deviation of prices
print(sd(prices))

# Range of prices
print(max(prices) - min(prices))

print(range(prices))
```

```{r}
v1 <- c(TRUE, FALSE, T, F, F)

sum(v1)
```


##### Factors: Handling Categorical Data

In addition to numeric, character, and logical data types, R also provides a special data type called `factor` to handle categorical data more efficiently. Factors are used to represent categorical variables and their levels.

```{r}
# Creating a factor
sections <- factor(c("PO1", "PO2", "PO2", "PO1", "PO1"))
print(sections)

# Getting the levels of a factor
levels(sections)
```

Factors are useful because they represent categories more intuitively and are often used in statistical analyses. R also assigns an integer value to each level behind the scenes, making computations faster and more memory-efficient.

```{r}
# Creating a factor with specified levels
education <- factor(c("High School", "College", "High School", "PhD"),
                    levels = c("High School", "College", "Master's", "PhD"))
print(education)

# Checking the levels of a factor
levels(education)

# Converting a factor to character
education_char <- as.character(education)
print(education_char)
```

```{r}
table(education)
```


```{r}
# Simulating a dataset of student majors
majors <- c("Economics", "Computer Science", "Biology", "Economics", "Mathematics")

# Creating a factor from the majors vector
major_factor <- factor(majors)

# Analyzing the distribution of majors
major_distribution <- table(major_factor) # the table() command returns a frequency table (more on this next week)
print(major_distribution)
```

#### Conditionals

```{r}
# If statement
x <- 20; y <- 20

if (x >= y) {
  print("x is greater than y")
} else {
  print("x is not greater than y")
}

# Economics example: Buying decision
price <- 25
budget <- 20

if (price <= budget) {
  print("Affordable")
} else {
  print("Too expensive")
}

```

```{r}
# If-else if-else ladder
grade <- 70

if (grade >= 90) {
  print("A")
} else if (grade >= 80) {
  print("B")
} else if (grade >= 70) {
  print("C")
} else {
  print("D or below")
}
```

```{r}
income <- 570000

if (income <= 50000) {
  tax <- income * 0.10
} else if (income <= 100000) {
  tax <- 50000 * 0.10 + (income - 50000) * 0.20
} else {
  tax <- 50000 * 0.10 + 50000 * 0.20 + (income - 100000) * 0.30
}

print(paste("Income Tax:", tax, "Great!"))
```

##### Logical Operators

R provides logical operators to combine conditions:

- &: AND operator (both statements true)

- |: OR operator (one of the statements true)

- !: NOT operator (negation)

- ==: Equal to operator

```{r}
# Logical operators
temperature <- 25
is_raining <- FALSE

if (temperature > 20 & !is_raining) {
  print("Great day for a picnic!")
} else {
  print("Maybe another day...")
}

```

```{r}
# OR and Equal to
age <- 18

if (age < 18 | age == 65) {
  print("You're eligible for a discount!")
} else {
  print("Sorry, no discount for you.")
}
```


#### Exercises

1. Create a variable age and assign your age to it. Print a message saying "You're young!" if your age is less than 30, otherwise, print "You're wise!"

```{r, echo=FALSE}
# Exercise 1
age <- 25

if (age < 30) {
  print("You're young!")
} else {
  print("You're wise!")
}

```

1b. Now write code that classifies a person into three generations (Gen Z, Millenial, and Boomer) based on their age. Here are the conditions:

- Gen Z: Age < 25
- Millenial: 25 <= Age < 40
- Boomer: Age >= 40

```{r}
age <- 54

if (age < 25) {
  print("Gen Z")
} else if (age < 40) {
  print("Millenial")
} else {
  print("Boomer")
}
```


2. Create a variable that holds a vector that contains 10 elements of various data types. Print the 4th element and its type. Then, print elements 3 and 6 and 7. 

```{r, echo=FALSE}
# Exercise 2
mixed_vector <- c(20, "hello", TRUE, 3.14, FALSE, "world", 42, 1.618, "R", -10)

# Print 4th element and its type
print(mixed_vector[4])
print(class(mixed_vector[4]))

# Print elements 3, 6, and 7 using conditional indexing
print(mixed_vector[c(3, 6, 7)])

```


2b. Make up two new vectors of length 5. One of items (types of cookies, ice cream, products, ...) and one with prices. Use indexing to match up three items to their respective prices. Print the values using the paste() command (look it up in google to find examples).

```{r}
items <- c("Cookie", "Ice Cream", "Candy", "Chips", "Soda")
prices <- c(1.50, 3.00, 0.75, 1.25, 1.00)

# Match items to prices
paste(items[1], ":", prices[1])
paste(items[3], ":", prices[3])
print(paste(items[5], ":", prices[5]))
```

2c. Index the prices in your vector that are less than or equal to the average price.

```{r}
print(mean(prices))
prices[prices <= mean(prices)]
```


3. Create a factor named temperature with levels "Cold", "Moderate", and "Hot". Convert the factor to a character vector.

```{r, echo=FALSE}
# Exercise 4
temperature <- factor(c("Cold", "Moderate", "Hot"))

# Convert factor to character vector
temperature_char <- as.character(temperature)
print(temperature_char)

```

3b. Create a factor with multiple instances of three levels (majors, degrees, foods, ...) and use the table() function to analyze the frequency of each.

```{r}
majors <- factor(c("Economics", "Computer Science", "Biology", "Economics", "Economics", "Computer Science", "Biology", "Economics", "Computer Science", "Biology"))

table(majors)
```


4. Create a program to calculate the cost of a hotel stay based on the following rules:

- Base cost per night: $100

- If the stay is longer than 7 nights, a discount of 10% is applied.

- If the stay is longer than 14 nights, a discount of 15% is applied.

```{r, echo=FALSE}
# Exercise 5
base_cost_per_night <- 100
stay_duration <- 15

if (stay_duration > 14) {
  discount_percent <- 15
} else if (stay_duration > 7) {
  discount_percent <- 10
} else {
  discount_percent <- 0
}

total_cost <- base_cost_per_night * stay_duration * (1 - discount_percent / 100)
print(paste("Total cost of the hotel stay: $", total_cost))

```

4b. In a restaurant, you can order a main dish and a dessert. There are 2 options for each:

- Main dish: Steak (\$20) or Salmon ($15)

- Dessert: Cake (\$8) or Ice Cream ($5)

Create a program that calculates the total cost of a meal based on the user's choices. Use indexing to pick the pair of items and calculate the total cost using conditionals.

```{r}
main_dish <- c("Steak", "Salmon")
dessert <- c("Cake", "Ice Cream")

main_choice <- 1
dessert_choice <- 2

if (main_dish[main_choice] == "Steak") {
  main_cost <- 20
} else {
  main_cost <- 15
}

if (dessert[dessert_choice] == "Cake") {
  dessert_cost <- 8
} else {
  dessert_cost <- 5
}

total_cost <- main_cost + dessert_cost
print(paste("Total cost of the meal: $", total_cost))
```

----
