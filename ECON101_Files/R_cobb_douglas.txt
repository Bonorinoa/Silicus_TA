---
title: "Cobb-Douglas Production Function"
author: "Augusto Gonzalez-Bonorino"
output: html_notebook
---

*See Classical Supply notes for reference details on the Cobb-Douglas production function and output elasticities. Try to map the math to code as you read through the slides and/or my notes.*

```{r}
library(ggplot2)
library(plotly)

# Cobb-Douglas function
# F(K,L) = A * K^alpha * L^beta
# 0 < a < 1, 0 < b < 1
cobb_douglas <- function(A, K, L, alpha, beta) {
  
  if (alpha <= 0 | alpha >= 1 | beta <= 0 | beta >= 1) {
    stop("Alpha and beta must be between 0 and 1")
  }
  return(A * K^alpha * L^beta)
}

# Generate data
# seq() generates a sequence of numbers
## length.out = 50 specifies the number of points in the sequence
## seq(1, 100, length.out = 50) generates a sequence from 1 to 100 with 50 points
K <- seq(1, 100, length.out = 50)
L <- seq(1, 100, length.out = 50)

A <- 1
alpha <- 0.3
beta <- 0.7

# outer() computes the outer product of two arrays
# here, it computes the output of the Cobb-Douglas function for all combinations of K and L
output <- outer(K, L, function(K, L) cobb_douglas(A, K, L, alpha, beta))

# 3D plot
plot_ly(x = K, y = L, z = output) %>% add_surface()
```

```{r}
# 2D plots for marginal products
K_fixed <- 50
L_fixed <- 50

# Marginal Product of Labor
# the data frame will have two columns: L and MPL
## L will be the variable for which we want to plot the marginal product
## MPL will be the marginal product of labor (can you see the relationship with the math in my notes?)
df_mpl <- data.frame(L = L, MPL = beta * A * K_fixed^alpha * L^(beta-1))

ggplot(df_mpl, aes(x = L, y = MPL)) + 
  geom_line() + 
  labs(title = "Marginal Product of Labor (a=0.3, b=0.7, K=50, L=50)", x = "Labor", y = "MPL")

# Marginal Product of Capital
df_mpk <- data.frame(K = K, MPK = alpha * A * K^(alpha-1) * L_fixed^beta)
ggplot(df_mpk, aes(x = K, y = MPK)) + 
  geom_line() + 
  labs(title = "Marginal Product of Capital (a=0.3, b=0.7, K=50, L=50)", x = "Capital", y = "MPK")
```

The following piece of code calculates the second derivatives of the Cobb-Douglas function with respect to capital and labor. The second derivatives are used to determine the concavity of the production function and the nature of the isoquants. In other words, we use the second derivatives to determine whether the production function exhibits increasing, decreasing, or constant returns to scale.


```{r}
library(ggplot2)
library(dplyr)
library(tidyr)

# Cobb-Douglas function
cobb_douglas <- function(A, K, L, alpha, beta) {
  A * K^alpha * L^beta
}

# Marginal Product of Capital
mpk <- function(A, K, L, alpha, beta) {
  alpha * A * K^(alpha - 1) * L^beta
}

# Marginal Product of Labor
mpl <- function(A, K, L, alpha, beta) {
  beta * A * K^alpha * L^(beta - 1)
}

# Second derivative with respect to K
mpk_derivative <- function(A, K, L, alpha, beta) {
  alpha * (alpha - 1) * A * K^(alpha - 2) * L^beta
}

# Second derivative with respect to L
mpl_derivative <- function(A, K, L, alpha, beta) {
  beta * (beta - 1) * A * K^alpha * L^(beta - 2)
}

# Generate some sample data
K <- seq(1, 100, length.out = 100)
L <- seq(1, 100, length.out = 100)
A <- 1

# Different combinations of alpha and beta
elasticities <- list(
  c(0.3, 0.7),
  c(0.5, 0.5),
  c(0.7, 0.3)
)

# Calculate marginal products for different elasticities
# lapply() applies a function to each element of a list
## here the function is being defined as an anonymous function, which means that it doesn't have a name or variable associated with it. ## It's just a function that takes an argument and returns a value without saving it to a variable.
## the function calculates the marginal products of capital and labor for a given set of parameters (A, K, L, alpha, beta)
### We will see the apply family of functions and anonymous functions in more detail in the R review of advanced concepts.
mp_data <- lapply(elasticities, function(e) {
  alpha <- e[1]
  beta <- e[2]
  data.frame(
    K = K,
    L = L,
    MPK = mpk(A, K, 50, alpha, beta),
    MPL = mpl(A, 50, L, alpha, beta),
    Alpha = alpha,
    Beta = beta
  )
}) %>% bind_rows()

# Plot marginal products
ggplot(mp_data, aes(x = K)) +
  geom_line(aes(y = MPK, color = "MPK")) +
  geom_line(aes(y = MPL, color = "MPL")) +
  facet_wrap(~paste("α =", Alpha, ", β =", Beta), scales = "free_y") +
  labs(title = "Marginal Products of Capital and Labor",
       x = "Capital/Labor", y = "Marginal Product",
       color = "Marginal Product") +
  theme_minimal()

# Calculate second derivatives
second_deriv_data <- lapply(elasticities, function(e) {
  alpha <- e[1]
  beta <- e[2]
  data.frame(
    K = K,
    L = L,
    MPK_deriv = mpk_derivative(A, K, 50, alpha, beta),
    MPL_deriv = mpl_derivative(A, 50, L, alpha, beta),
    Alpha = alpha,
    Beta = beta
  )
}) %>% bind_rows()

# Plot second derivatives
ggplot(second_deriv_data, aes(x = K)) +
  geom_line(aes(y = MPK_deriv, color = "d²F/dK²")) +
  geom_line(aes(y = MPL_deriv, color = "d²F/dL²")) +
  facet_wrap(~paste("α =", Alpha, ", β =", Beta), scales = "free_y") +
  labs(title = "Second Derivatives (Diminishing Returns)",
       x = "Capital/Labor", y = "Second Derivative",
       color = "Second Derivative") +
  theme_minimal()
```

## Output elasticities estimation

The following piece of code estimates the output elasticities of capital and labor using the Cobb-Douglas production function by running a log-linear regression (all variables are log transformed). The output elasticities are the coefficients of the log-linear regression, which represent the percentage change in output for a 1% change in capital or labor. The code uses the `lm()` function in R to estimate the coefficients of the log-linear regression model.


```{r}
# Install and load required packages
install.packages(c("fredr", "dplyr", "lubridate", "ggplot2"))
```


```{r}
library(fredr)
library(dplyr)
library(lubridate)

# Set your FRED API key
fredr_set_key("aeca492c1d6b24a773fe1fb915779b96") # Replace with your own key from https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html

# Function to fetch and prepare data
get_data <- function(start_date, end_date) {
  # Fetch real GDP (billions of chained 2012 dollars)
  gdp <- fredr(
    series_id = "GDPC1",
    observation_start = start_date,
    observation_end = end_date,
    frequency = "q" # quarterly measurements
  )
  
  # Fetch total labor hours (all persons, nonfarm business sector)
  labor <- fredr(
    series_id = "HOANBS",
    observation_start = start_date,
    observation_end = end_date,
    frequency = "q" # quarterly measurements
  )
  
  # Fetch real capital stock (private fixed assets, billions of 2012 dollars)
  capital <- fredr(
    series_id = "K1PTOTL1ES000",
    observation_start = start_date,
    observation_end = end_date,
    frequency = "a"  # annual measurements
  )
  
  # Combine and prepare the data
  # Here we are merging the three data series into one big data frame
  ## makes it easier to process and visualize
  data <- gdp %>%
    left_join(labor, by = "date") %>%
    left_join(capital, by = "date") %>%
    filter(!is.na(value.x) & !is.na(value.y) & !is.na(value)) %>%
    mutate(
      log_gdp = log(value.x),
      log_labor = log(value.y),
      log_capital = log(value)
    ) %>%
    select(date, log_gdp, log_labor, log_capital)
  
  return(data)
}

# Estimate elasticities via logged differences regression
# Remember that a regression in which the independent and dependent variables are logged returns elasticities estimates
# lm() is the R command to run a regression. We will study it in the econometrics section towards the end of the semester.
estimate_elasticities <- function(data) {
  model <- lm(log_gdp ~ log_labor + log_capital, data = data)
  return(coef(model))
}

# Analyze two periods: Pre-Great Recession and Post-Great Recession
pre_recession <- get_data(as.Date("2000-01-01"), as.Date("2007-12-31"))
post_recession <- get_data(as.Date("2009-01-01"), as.Date("2017-12-31"))

pre_elasticities <- estimate_elasticities(pre_recession)
post_elasticities <- estimate_elasticities(post_recession)

# Print results
cat("Pre-Great Recession (2000-2007) Elasticities:\n")
cat("Labor:", pre_elasticities["log_labor"], "\n")
cat("Capital:", pre_elasticities["log_capital"], "\n")
cat("\nPost-Great Recession (2009-2017) Elasticities:\n")
cat("Labor:", post_elasticities["log_labor"], "\n")
cat("Capital:", post_elasticities["log_capital"], "\n")

```

```{r}
# more current estimates of the elasticities
period <- get_data(as.Date("2020-01-01"), as.Date("2023-12-31"))

elasticities<- estimate_elasticities(period)

cat("Current Elasticities:\n")
cat("Labor:", elasticities["log_labor"], "\n")
cat("Capital:", elasticities["log_capital"], "\n")
```

